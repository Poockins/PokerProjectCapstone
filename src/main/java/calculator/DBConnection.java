/**
 * DBConnection is used for database functionality throughout the app
 *
 * @author Yuko Takegoshi
 * @version 1.0
 */

package calculator;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

public class DBConnection {

  static final String DB_PATH = "data/poker";
  public Connection conn; // Persist database connection until explicitly shut down

  /**
   * Constructor
   * @throws Exception
   */
  public DBConnection() throws Exception {
    Class.forName("org.hsqldb.jdbcDriver");

    conn = DriverManager.getConnection("jdbc:hsqldb:file:" + DB_PATH, "SA", "");
  }

  /**
   * Initializes a database and table structure if they do not yet exist
   *
   * @return Nothing
   * @throws SQLException
   */
  public void setup() throws SQLException {
    createGamesTable();
    createPlayersTable();
    createHandsTable();
  }

  /**
   * Empties all data in the database
   *
   * @return Nothing
   * @throws SQLException
   */
  public void reset() throws SQLException {
    Statement statement = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    statement.execute("TRUNCATE SCHEMA PUBLIC RESTART IDENTITY AND COMMIT NO CHECK");
    statement.close();
  }

  /**
   * Wraps a SELECT SQL command
   *
   * @param query SELECT query to run
   * @return the ResultSet from the SQL query
   * @throws SQLException
   */
  public ResultSet selectQuery(String query) throws SQLException {
    Statement st;
    ResultSet rs;

    st = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

    rs = st.executeQuery(query);

    st.close();

    return rs;
  }

  /**
   * Wraps a CREATE, DROP, or UPDATE SQL command
   *
   * @param query SQL query to run
   * @return boolean representing success of the query
   * @throws SQLException
   */
  public boolean updateQuery(String query) throws SQLException {
    Statement st;
    boolean status;

    st = conn.createStatement();
    int i = st.executeUpdate(query);

    if (i == -1) {
      status = false;
    } else {
      status = true;
    }

    st.close();

    return status;
  }

  /**
   * Wraps an INSERT SQL query
   *
   * @param query INSERT query to run
   * @return ArrayList containing generated keys from new records
   * @throws SQLException
   */
  public ArrayList<Integer> insertQuery(String query) throws SQLException {
    Statement st;
    ResultSet rs;
    ArrayList<Integer> keys = new ArrayList<>();

    st = conn.createStatement();
    int i = st.executeUpdate(query, Statement.RETURN_GENERATED_KEYS);

    if (i == -1) {
      throw new SQLException("INSERT failed: " + query);
    } else {
      rs = st.getGeneratedKeys();

      while (rs.next()) {
        keys.add(rs.getInt(1));
      }
    }

    rs.close();
    st.close();
    return keys;
  }

  /**
   * Initializes the games table if it doesn't already exist
   *
   * @return Nothing
   * @throws SQLException on creation failure
   */
  private void createGamesTable() throws SQLException {
    String query = "CREATE TABLE IF NOT EXISTS games (" +
        "id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, " +
        "flop VARCHAR(30) ARRAY, " +
        "turn VARCHAR(30), " +
        "river VARCHAR(30), " +
        "created_at TIMESTAMP);";

    updateQuery(query);
  }

  /**
   * Initializes the players table if it doesn't already exist
   *
   * @return Nothing
   * @throwsSQLException on creation failure
   */
  private void createPlayersTable() throws SQLException {
    String query = "CREATE TABLE IF NOT EXISTS players (" +
        "id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, " +
        "name VARCHAR(256));";

    updateQuery(query);
  }

  /**
   * Initializes the hands table if it doesn't already exist
   *
   * @return Nothing
   * @throws SQLException on creation failure
   */
  private void createHandsTable() throws SQLException {
    String query = "CREATE TABLE IF NOT EXISTS hands (" +
        "id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, " +
        "cards VARCHAR(30) ARRAY, " +
        "player_id INT, " +
        "game_id INT, " +
        "FOREIGN KEY(player_id) REFERENCES players, " +
        "FOREIGN KEY(game_id) REFERENCES games);";

    updateQuery(query);
  }
}